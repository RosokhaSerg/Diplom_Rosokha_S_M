





#Если Сервер Или ТолстыйКлиентОбычноеПриложение Или ВнешнееСоединение Тогда

#Область ОбработчикиСобытий

//@skip-check data-exchange-load
Процедура ПередЗаписью(Отказ, РежимЗаписи, РежимПроведения)
	

	Запрос = Новый Запрос;
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	ВКМ_ОбслуживаниеКлинента.Клиент КАК Клиент,
		|	ВКМ_ОбслуживаниеКлинента.ДатаПроведенияРабот КАК Дата,
		|	ВКМ_ОбслуживаниеКлинента.ВремяНачалаРабот КАК Время,
		|	ВКМ_ОбслуживаниеКлинента.Ссылка КАК Ссылка,
		|	ВКМ_ОбслуживаниеКлинента.Специалист КАК Сотрудник,
		|	ВКМ_ОбслуживаниеКлинента.ВыпоненныеРаботы.(
		|		ОписаниеРабот КАК ОписаниеРабот
		|	) КАК ВыпоненныеРаботы
		|ИЗ
		|	Документ.ВКМ_ОбслуживаниеКлинента КАК ВКМ_ОбслуживаниеКлинента
		|ГДЕ
		|	ВКМ_ОбслуживаниеКлинента.Ссылка = &Ссылка";
	
	
	Запрос.УстановитьПараметр("Ссылка", Ссылка);
	Выборка = Запрос.Выполнить().Выбрать();  
	Выборка.Следующий();
	
	ТекстТелеграм = СтрШаблон("Создан Новый документ: Клиент %1, Дата проведения работ %2  Время начало работ %3  Сотрудник %4, Описание проблеммы;%5", 
								Клиент, Формат(ДатаПроведенияРабот,"ДЛФ=DD;" ), Формат(ВремяНачалаРабот,"ДЛФ=T;"), Специалист, ОписаниеПроблеммы);	
	
	Если ЭтоНовый() Тогда	
		СоздатьУведомление(ТекстТелеграм);
	ИначеЕсли Не ЭтоНовый() Тогда
		Если Выборка.Сотрудник <> Специалист Тогда
			НовыйСпециалист = Специалист;
		КонецЕсли;
		Если Выборка.Дата <> ДатаПроведенияРабот Тогда
			НоваяДата = Формат(ДатаПроведенияРабот,"ДЛФ=DD;" );
		КонецЕсли;
		Если Выборка.Время <> ВремяНачалаРабот Тогда
			НовоеВремя = Формат(ВремяНачалаРабот,"ДЛФ=T;");
		КонецЕсли;
		Если Выборка.Клиент <> Клиент Тогда
			НовыйКлиент = Клиент;
		КонецЕсли;
		ТекстТелеграм = СтрШаблон("Изменен документ %1: Клиент %2, Дата проведения работ %3 Время начало работ %4 Сотрудник %5, Описание проблеммы;%6",
									Ссылка, НовыйКлиент, НоваяДата, НовоеВремя, НовыйСпециалист, ОписаниеПроблеммы);	
		СоздатьУведомление(ТекстТелеграм);
	
	КонецЕсли;	
	
КонецПроцедуры

Процедура ОбработкаПроведения(Отказ,Режим)      
	
// Движение пот регистру ВыполненныеКлиентуРаботы.	

 Запрос = Новый Запрос;
 Запрос.Текст =
 	"ВЫБРАТЬ
 	|	ДоговорыКонтрагентов.Владелец КАК Клиент,
 	|	ДоговорыКонтрагентов.ВКМ_ПериодС КАК От,
 	|	ДоговорыКонтрагентов.ВКМ_По КАК До,
 	|	ДоговорыКонтрагентов.ВКМ_СтоимостьЧасаРаботы КАК ЦенаЧас,
 	|	ДоговорыКонтрагентов.ВидДоговора КАК ВидДоговора
 	|ИЗ
 	|	Справочник.ДоговорыКонтрагентов КАК ДоговорыКонтрагентов
 	|ГДЕ
 	|	ДоговорыКонтрагентов.Владелец = &Владелец";
 
 Запрос.УстановитьПараметр("Владелец", Клиент);
 
 РезультатЗапроса = Запрос.Выполнить();
 
 ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
 Движения.ВКМ_ВыполненныеКлиентуРаботы.Записывать = Истина;
 
 Пока ВыборкаДетальныеЗаписи.Следующий() Цикл
 	
 	Если ВыборкаДетальныеЗаписи.ВидДоговора = ПредопределенноеЗначение("Перечисление.ВидыДоговоровКонтрагентов.ВКМ_АбонентскоеОбслуживание")
 	                 И  ВыборкаДетальныеЗаписи.От <= ДатаПроведенияРабот 
 	                     И ВыборкаДетальныеЗаписи.До >= ДатаПроведенияРабот Тогда 
 	                     	
 	     	Для Каждого ТекСтрока из ВыпоненныеРаботы Цикл
 	   		Движение = Движения.ВКМ_ВыполненныеКлиентуРаботы.Добавить();
			Движение.Период = Дата;
			Движение.Клиент = Клиент;
			Движение.Договор = Договор;
			Движение.КоличествоЧасов = ТекСтрока.ФактическоПотраченоЧасов;
			СуммаОплаты = ВыборкаДетальныеЗаписи.ЦенаЧас * ТекСтрока.ФактическоПотраченоЧасов;
			Движение.СуммаКОплате = СуммаОплаты;
			
		КонецЦикла;	
	КонецЕсли;
 	
КонецЦикла;    

// Движение по регистру ВКМ_ВыполненныеСотрудникомРаботы

 Запрос = Новый Запрос;
	Запрос.Текст = 
	"ВЫБРАТЬ
	|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.ПроцентОтРабот КАК ПроцентОтРабот
	|ИЗ
	|	РегистрСведений.ВКМ_УсловияОплатыСотрудников.СрезПоследних(&Дата, ) КАК ВКМ_УсловияОплатыСотрудниковСрезПоследних
	|ГДЕ
	|	ВКМ_УсловияОплатыСотрудниковСрезПоследних.Сотрудник.Ссылка = &Сотрудник";
	
	Запрос.УстановитьПараметр("Дата", Дата);
	Запрос.УстановитьПараметр("Сотрудник", Специалист);
	
	РезультатЗапроса = Запрос.Выполнить(); 
	
	Если РезультатЗапроса.Пустой() Тогда
		Отказ = Истина;  
		Сообщить("Отсутствует значение процента от работы для указанного специалиста!"); 
		Возврат; 
	КонецЕсли;
	
	ВыборкаДетальныеЗаписи = РезультатЗапроса.Выбрать();
	
	ВыборкаДетальныеЗаписи.Следующий();
	
	//регистр ВКМ_ВыполненныеСотрудникомРаботы
	Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записывать = Истина; 
	Движение = Движения.ВКМ_ВыполненныеСотрудникомРаботы.Добавить(); 
	Движение.ВидДвижения = ВидДвиженияНакопления.Расход; 
	Движение.Период = Дата; 
	Движение.Сотрудник = Специалист; 
	Движение.ЧасовКОплате = ВыпоненныеРаботы.Итог("ЧасыКОплате"); 
	
	ЧасовКОплатеКлиенту = ВыпоненныеРаботы.Итог("ЧасыКОплате");   
	СтавкаЧасаКлиента = Договор.ВКМ_СтоимостьЧасаРаботы; 
	ПроцентОтРабот = ВыборкаДетальныеЗаписи.ПроцентОтРабот; 
    
    Движение.СуммаКОплате = ЧасовКОплатеКлиенту * СтавкаЧасаКлиента * ПроцентОтРабот / 100; 
	
	Движения.ВКМ_ВыполненныеСотрудникомРаботы.Записать(); 


 
КонецПроцедуры

#КонецОбласти

#Область СлужебныеПроцедурыИФункции

Процедура СоздатьУведомление(ТекстТелеграм) 
	
	НовыйЭлемент = Справочники.ВКМ_УведомленияТелеграммБоту.СоздатьЭлемент(); 
	НовыйЭлемент.Текст = ТекстТелеграм; 
	НовыйЭлемент.Записать();    
	
КонецПроцедуры


#КонецОбласти
#КонецЕсли